const { MongoClient } = require('mongodb');

const uri = process.env.MONGO_URI || "mongodb://node:red@10.55.6.161:27017/node_red?authSource=node_red";
const dbName = process.env.MONGO_DB || "node_red";

let db;
let flowsCollection;

async function connect() {
    if (!db) {
        const client = new MongoClient(uri);
        await client.connect();
        db = client.db(dbName);
        flowsCollection = db.collection("flows");
    }
}

module.exports = {
    async init(settings) {
        await connect();
    },

    async getFlows() {
        await connect();
        const doc = await flowsCollection.findOne({ _id: "flows" });
        return doc ? doc.data : null;
    },

    async saveFlows(flows) {
        await connect();
        await flowsCollection.updateOne(
            { _id: "flows" },
            { $set: { data: flows } },
            { upsert: true }
        );
    },

    async getCredentials() {
        await connect();
        const doc = await flowsCollection.findOne({ _id: "credentials" });
        return doc ? doc.data : null;
    },

    async saveCredentials(creds) {
        await connect();
        await flowsCollection.updateOne(
            { _id: "credentials" },
            { $set: { data: creds } },
            { upsert: true }
        );
    },

    async getSettings() {
        await connect();
        const doc = await flowsCollection.findOne({ _id: "settings" });
        return doc ? doc.data : null;
    },

    async saveSettings(settings) {
        await connect();
        await flowsCollection.updateOne(
            { _id: "settings" },
            { $set: { data: settings } },
            { upsert: true }
        );
    },

    async getLibraryEntry(type, path) {
        // Optional: store node library entries in MongoDB
        return null;
    },

    async saveLibraryEntry(type, path, meta, body) {
        // Optional: save library entries to MongoDB
    }
};
