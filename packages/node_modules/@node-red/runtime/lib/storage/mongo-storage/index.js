/**
 * MongoDB-based storage module for Node-RED
 * Based on localfilesystem.js, replacing filesystem with MongoDB.
 */

const fs = require("fs-extra");
const fspath = require("path");
const { MongoClient } = require("mongodb");
const log = require("@node-red/util").log;

const util = require("@node-red/runtime/lib/storage/localfilesystem/util");
const library = require("@node-red/runtime/lib/storage/localfilesystem/library");
const sessions = require("@node-red/runtime/lib/storage/localfilesystem/sessions");
const runtimeSettings = require("@node-red/runtime/lib/storage/localfilesystem/settings");
const projects = require("@node-red/runtime/lib/storage/localfilesystem/projects");

let db;
let flowsCollection;
let settings;
let initialFlowLoadComplete = false;

const uri = process.env.MONGO_URI || "mongodb://node:red@10.55.6.161:27017/node_red?authSource=node_red";
const dbName = process.env.MONGO_DB || "node_red";

/** ------------------------
 *  Mongo Connection
 *  ------------------------ */
async function connect() {
  if (!db) {
    const client = new MongoClient(uri);
    await client.connect();
    db = client.db(dbName);
    flowsCollection = db.collection("flows");
    log.info(`[mongo-storage] Connected to MongoDB: ${uri}`);
  }
}

/** ------------------------
 *  Helper: check config file
 *  ------------------------ */
function checkForConfigFile(dir) {
  return (
    fs.existsSync(fspath.join(dir, ".config.json")) ||
    fs.existsSync(fspath.join(dir, ".config.nodes.json"))
  );
}

/** ------------------------
 *  Mongo-backed Storage
 *  ------------------------ */
const mongofilesystem = {
  init: async function (_settings, runtime) {
    settings = _settings;
    await connect();

    // Mimic localfilesystem userDir initialization
    if (!settings.userDir) {
      if (checkForConfigFile(process.env.NODE_RED_HOME)) {
        settings.userDir = process.env.NODE_RED_HOME;
      } else if (
        process.env.HOMEPATH &&
        checkForConfigFile(fspath.join(process.env.HOMEPATH, ".node-red"))
      ) {
        settings.userDir = fspath.join(process.env.HOMEPATH, ".node-red");
      } else {
        settings.userDir = fspath.join(
          process.env.HOME ||
            process.env.USERPROFILE ||
            process.env.HOMEPATH ||
            process.env.NODE_RED_HOME,
          ".node-red"
        );
      }
    }

    if (!settings.readOnly) {
      await fs.ensureDir(fspath.join(settings.userDir, "node_modules"));
    }

    // Initialize Node-RED internal modules
    sessions.init(settings);
    await runtimeSettings.init(settings);
    await library.init(settings);
    await projects.init(settings, runtime);

    // Ensure package.json exists (only in filesystem for compatibility)
    const packageFile = fspath.join(settings.userDir, "package.json");

    if (!settings.readOnly) {
      try {
        fs.statSync(packageFile);
      } catch (err) {
        const defaultPackage = {
          name: "node-red-project",
          description: "A Node-RED Project (MongoDB backed)",
          version: "0.0.1",
          private: true,
        };
        await util.writeFile(packageFile, JSON.stringify(defaultPackage, "", 4));
      }
    }

    log.info("[mongo-storage] MongoDB storage initialized.");
  },

  /** ------------------------
   *  Flows
   *  ------------------------ */
  async getFlows() {
    await connect();
    const doc = await flowsCollection.findOne({ _id: "flows" });
    return doc ? doc.data : [];
  },

  async saveFlows(flows) {
    await connect();
    await flowsCollection.updateOne(
      { _id: "flows" },
      { $set: { data: flows, updatedAt: new Date() } },
      { upsert: true }
    );
  },

  /** ------------------------
   *  Credentials
   *  ------------------------ */
  async getCredentials() {
    await connect();
    const doc = await flowsCollection.findOne({ _id: "credentials" });
    return doc ? doc.data : {};
  },

  async saveCredentials(creds) {
    await connect();
    await flowsCollection.updateOne(
      { _id: "credentials" },
      { $set: { data: creds, updatedAt: new Date() } },
      { upsert: true }
    );
  },

  /** ------------------------
   *  Settings
   *  ------------------------ */
  async getSettings() {
    await connect();
    const doc = await flowsCollection.findOne({ _id: "settings" });
    return doc ? doc.data : {};
  },

  async saveSettings(settingsData) {
    await connect();
    await flowsCollection.updateOne(
      { _id: "settings" },
      { $set: { data: settingsData, updatedAt: new Date() } },
      { upsert: true }
    );
  },

  /** ------------------------
   *  Sessions & Library
   *  ------------------------ */
  getSessions: sessions.getSessions,
  saveSessions: sessions.saveSessions,

  async getLibraryEntry(type, path) {
    await connect();
    const doc = await flowsCollection.findOne({ _id: `lib:${type}:${path}` });
    return doc ? doc.data : null;
  },

  async saveLibraryEntry(type, path, meta, body) {
    await connect();
    await flowsCollection.updateOne(
      { _id: `lib:${type}:${path}` },
      { $set: { meta, data: body, updatedAt: new Date() } },
      { upsert: true }
    );
  },

  /** ------------------------
   *  Projects (kept same as localfilesystem)
   *  ------------------------ */
  projects: projects,
};

module.exports = mongofilesystem;
